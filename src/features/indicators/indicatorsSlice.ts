import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { IndicatorsState } from '../../utils/typedefs';

const initialState: IndicatorsState = {
  typeList: [],
  types: [],
  defaultYears: [],
  uoms: [],

  names: { indicators: {}, locations: {}, uom: {} },
  indicatorsOrder: [],
  locationsOrder: [],
  yearsOrder: [],

  values: [],

  date: 'current',
  status: 'idle',
};

export const getCurrentIndicatorValues = createAsyncThunk(
  'indicators/getCurrent',
  async () => {
    const res = await fetch('http://localhost:3000/api/v1/current').then((data) =>
      data.json()
    );
    return res;
  }
);

export const indicatorsSlice = createSlice({
  name: 'indicators',
  initialState,
  // The `reducers` field defines reducers and generates associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getCurrentIndicatorValues.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getCurrentIndicatorValues.rejected, (state) => {
        state.status = 'failed';
      })
      .addCase(getCurrentIndicatorValues.fulfilled, (state, { payload }) => {
        state.status = 'idle';
        state.date = 'current';
        state.names.indicators = payload.desc.indicators;
        state.names.locations = payload.desc.locations;
        state.names.uom = payload.desc.uom;
        state.indicatorsOrder = payload.keys.indicators;
        state.locationsOrder = payload.keys.locations;
        state.yearsOrder = payload.keys.years;
        state.values = payload.values.map((value: number) => {
          if (value) {
            return Number(value.toFixed(9));
          } else {
            return null;
          }
        });
        state.typeList = payload.types;
        state.types = state.indicatorsOrder.map(
          (indicatorName) => payload.meta[indicatorName].type
        );
        state.defaultYears = state.indicatorsOrder.map(
          (indicatorName) => payload.meta[indicatorName].default_years
        );
        state.uoms = state.indicatorsOrder.map(
          (indicatorName) => payload.meta[indicatorName].uom
        );
      });
  },
});

export const indicatorsReducer = indicatorsSlice.reducer;
