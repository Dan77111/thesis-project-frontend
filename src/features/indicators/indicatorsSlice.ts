import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';

export interface IndicatorsState {
  indicatorNames: Map<string, string>;
  locationNames: Map<string, string>;

  indicatorsOrder: string[];
  locationsOrder: string[];
  yearsOrder: string[];

  values: number[];

  date: string;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: IndicatorsState = {
  indicatorNames: new Map(),
  locationNames: new Map(),

  indicatorsOrder: [],
  locationsOrder: [],
  yearsOrder: [],

  values: [],

  date: 'current',
  status: 'idle',
};

export const getCurrentIndicatorValues = createAsyncThunk(
  'indicators/getCurrent',
  async () => {
    const res = await fetch(
      'http://thesis-project-api.herokuapp.com/api/v1/current'
    ).then((data) => data.json());
    return res;
  }
);

export const indicatorsSlice = createSlice({
  name: 'indicators',
  initialState,
  // The `reducers` field defines reducers and generates associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getCurrentIndicatorValues.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getCurrentIndicatorValues.rejected, (state) => {
        state.status = 'failed';
      })
      .addCase(getCurrentIndicatorValues.fulfilled, (state, { payload }) => {
        state.status = 'idle';
        state.date = 'current';
        state.indicatorNames = payload.desc.indicators;
        state.locationNames = payload.desc.locations;
        state.indicatorsOrder = payload.keys.indicators;
        state.locationsOrder = payload.keys.locations;
        state.yearsOrder = payload.keys.years;
        state.values = payload.values;
      });
  },
});

export const indicatorsReducer = indicatorsSlice.reducer;
